#if FilterSize_ == 3

static const float W[3][3] =
{
    { 0.5,1.0,0.5, },
    { 1.0,1.0,1.0, },
    { 0.5,1.0,0.5, }
};

#elif FilterSize_ == 5

static const float W[5][5] =
{
    { 0.0,0.5,1.0,0.5,0.0 },
    { 0.5,1.0,1.0,1.0,0.5 },
    { 1.0,1.0,1.0,1.0,1.0 },
    { 0.5,1.0,1.0,1.0,0.5 },
    { 0.0,0.5,1.0,0.5,0.0 }
};

#elif FilterSize_ == 7

// -- 7x7 disc kernel
static const float W[FilterSize_][FilterSize_] =
{
    { 0.0,0.0,0.5,1.0,0.5,0.0,0.0 },
    { 0.0,1.0,1.0,1.0,1.0,1.0,0.0 },
    { 0.5,1.0,1.0,1.0,1.0,1.0,0.5 },
    { 1.0,1.0,1.0,1.0,1.0,1.0,1.0 },
    { 0.5,1.0,1.0,1.0,1.0,1.0,0.5 },
    { 0.0,1.0,1.0,1.0,1.0,1.0,0.0 },
    { 0.0,0.0,0.5,1.0,0.5,0.0,0.0 }
};

#elif FilterSize_ == 9

static const float W[9][9] =
{
    { 0.0,0.0,0.0,0.5,1.0,0.5,0.0,0.0,0.0 },
    { 0.0,0.0,1.0,1.0,1.0,1.0,1.0,0.0,0.0 },
    { 0.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,0.0 },
    { 0.5,1.0,1.0,1.0,1.0,1.0,1.0,1.0,0.5 },
    { 1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0 },
    { 0.5,1.0,1.0,1.0,1.0,1.0,1.0,1.0,0.5 },
    { 0.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,0.0 },
    { 0.0,0.0,1.0,1.0,1.0,1.0,1.0,0.0,0.0 },
    { 0.0,0.0,0.0,0.5,1.0,0.5,0.0,0.0,0.0 }
};

#endif

#if PoissonKernel_ == 2
static const int kPoissonSample = 4;
static const float2 PoissonDisk[kPoissonSample] = {
    float2(-0.94201624, -0.39906216),
    float2(0.94558609, -0.76890725),
    float2(-0.094184101, -0.92938870),
    float2(0.34495938, 0.29387760)
};
#elif PoissonKernel_ == 3 
static const int kPoissonSample = 9;
static const float2 PoissonDisk[kPoissonSample] = {
    float2(0.07881197f, 0.03746713f),
    float2(0.2480896f, -0.8793799f),
    float2(0.6023098f, 0.2738653f),
    float2(-0.3207254f, 0.5149536f),
    float2(0.5588677f, -0.2816212f),
    float2(-0.4454237f, -0.2362587f),
    float2(0.1127232f, 0.8650647f),
    float2(-0.4380007f, -0.799684f),
    float2(-0.9074062f, 0.1835023)
};
#elif PoissonKernel_ == 4
static const int kPoissonSample = 16;
static const float2 PoissonDisk[kPoissonSample] = {
   float2( -0.94201624, -0.39906216 ), 
   float2( 0.94558609, -0.76890725 ), 
   float2( -0.094184101, -0.92938870 ), 
   float2( 0.34495938, 0.29387760 ), 
   float2( -0.91588581, 0.45771432 ), 
   float2( -0.81544232, -0.87912464 ), 
   float2( -0.38277543, 0.27676845 ), 
   float2( 0.97484398, 0.75648379 ), 
   float2( 0.44323325, -0.97511554 ), 
   float2( 0.53742981, -0.47373420 ), 
   float2( -0.26496911, -0.41893023 ), 
   float2( 0.79197514, 0.19090188 ), 
   float2( -0.24188840, 0.99706507 ), 
   float2( -0.81409955, 0.91437590 ), 
   float2( 0.19984126, 0.78641367 ), 
   float2( 0.14383161, -0.14100790 ) 
};
#elif PoissonKernel_ == 5
static const int kPoissonSample = 25;
static const float2 PoissonDisk[kPoissonSample] = {
    float2( 0.5690044f, 0.5019987f),
    float2( 0.510525f, 0.03067501f),
    float2( 0.03836535f, 0.6399833f),
    float2( 0.2714659f, 0.9086838f),
    float2( 0.9165546f, 0.3514419f),
    float2( 0.2334143f, 0.3468729f),
    float2( -0.332902f, 0.3265254f),
    float2( -0.02541907f, -0.1118891f),
    float2( 0.3016431f, -0.2209217f),
    float2( -0.565051f, 0.6782464f),
    float2( -0.2551003f, 0.9601918f),
    float2( 0.9038316f, -0.02526411f),
    float2( 0.02255045f, -0.6283991f),
    float2( -0.4000278f, -0.4718304f),
    float2( -0.3254175f, 0.002260157f),
    float2( 0.43432f, -0.5030791f),
    float2( -0.6008326f, -0.2123641f),
    float2( 0.7125179f, -0.2919069f),
    float2( -0.3653922f, -0.7855869f),
    float2( -0.7326903f, -0.5110741f),
    float2( -0.6759196f, 0.1084243f),
    float2( -0.8743742f, 0.460447f),
    float2( -0.9176462f, -0.2079881f),
    float2( 0.2695973f, -0.8207229f),
    float2( -0.06407193f, -0.9475034)
};
#elif PoissonKernel_ == 6
static const int kPoissonSample = 36;
static const float2 PoissonDisk[kPoissonSample] = {
    float2( 0.2394983f, 0.2498003f),
    float2( 0.02893783f, 0.08422609f),
    float2( -0.116179f, 0.4261646f),
    float2( 0.3265657f, 0.5044792f),
    float2( 0.3649393f, -0.07742539f),
    float2( 0.6810268f, 0.5062568f),
    float2( 0.2521908f, 0.7663391f),
    float2( 0.1140674f, -0.1661627f),
    float2( 0.5786963f, 0.1625298f),
    float2( -0.09721324f, 0.7431134f),
    float2( 0.6518984f, -0.197364f),
    float2( 0.9535423f, 0.1802574f),
    float2( -0.4372699f, 0.6842467f),
    float2( -0.3128627f, -0.009474937f),
    float2( -0.3361405f, 0.2521935f),
    float2( -0.1957743f, -0.3406529f),
    float2( -0.5983863f, 0.4125724f),
    float2( -0.5415389f, -0.150398f),
    float2( -0.5655738f, -0.4630919f),
    float2( -0.8000662f, 0.07785636f),
    float2( 0.8989856f, -0.310921f),
    float2( -0.4133028f, -0.8762367f),
    float2( -0.869888f, -0.478381f),
    float2( -0.8569032f, -0.1909013f),
    float2( -0.3409881f, -0.607469f),
    float2( 0.7532233f, -0.5742455f),
    float2( 0.51114f, -0.4458927f),
    float2( -0.03269383f, -0.6996279f),
    float2( 0.1886715f, -0.4248772f),
    float2( 0.3488481f, -0.8205853f),
    float2( 0.07543402f, 0.9839508f),
    float2( 0.5155034f, 0.8435355f),
    float2( -0.07921357f, -0.9892302f),
    float2( -0.6826338f, -0.7095228f),
    float2( -0.885066f, 0.402068f),
    float2( -0.7055764f, 0.678046)
};
#elif PoissonKernel_ == 7
static const int kPoissonSample = 49;
static const float2 PoissonDisk[kPoissonSample] = {
    float2( -0.4454223f, 0.6774303f),
    float2( -0.5784627f, 0.5059428f),
    float2( -0.2563594f, 0.8006825f),
    float2( -0.3590416f, 0.4293514f),
    float2( -0.03878993f, 0.5876671f),
    float2( 0.07574223f, 0.8313671f),
    float2( 0.2947393f, 0.5082201f),
    float2( 0.3918922f, 0.8658489f),
    float2( -0.6565287f, 0.1937974f),
    float2( -0.1415495f, 0.2801138f),
    float2( -0.4093927f, 0.143997f),
    float2( 0.1150615f, 0.3296695f),
    float2( -0.1910229f, -0.003865221f),
    float2( 0.03797984f, -0.008411977f),
    float2( 0.3091888f, 0.1675459f),
    float2( 0.6593362f, 0.6265087f),
    float2( -0.06472702f, 0.9893144f),
    float2( 0.3714309f, -0.2401227f),
    float2( -0.1407435f, -0.2125495f),
    float2( 0.09224027f, -0.211648f),
    float2( 0.01149454f, -0.4383049f),
    float2( -0.4758587f, -0.07194132f),
    float2( -0.3918561f, -0.547964f),
    float2( -0.1426984f, -0.5909823f),
    float2( 0.5917234f, 0.2602651f),
    float2( 0.7991835f, 0.3767005f),
    float2( 0.6306294f, -0.07027097f),
    float2( 0.9127367f, 0.1595371f),
    float2( -0.4630873f, -0.7908209f),
    float2( -0.1838018f, -0.8054383f),
    float2( 0.193139f, -0.5789253f),
    float2( 0.04567739f, -0.7896754f),
    float2( -0.3628852f, -0.2967689f),
    float2( 0.4092828f, -0.6062304f),
    float2( 0.5740579f, -0.2990662f),
    float2( 0.6633232f, -0.5342934f),
    float2( 0.9873909f, -0.129633f),
    float2( 0.244816f, -0.9171079f),
    float2( 0.4997913f, -0.8495148f),
    float2( -0.9747993f, -0.03529091f),
    float2( -0.9249886f, 0.1770265f),
    float2( -0.7851444f, -0.1305092f),
    float2( -0.8007771f, 0.4805826f),
    float2( 0.8323507f, -0.3791999f),
    float2( -0.6914219f, -0.3356389f),
    float2( -0.6746368f, -0.6086016f),
    float2( -0.6749389f, 0.7249671f),
    float2( 0.5071416f, 0.4529974f),
    float2( -0.9217388f, -0.3291183)
};
#elif PoissonKernel_ == 8
static const int kPoissonSample = 64;
static const float2 PoissonDisk[kPoissonSample] = {
    float2( 0.7521704f, -0.06083683f),
    float2( 0.9600172f, -0.1670805f),
    float2( 0.6701434f, 0.1327731f),
    float2( 0.7145795f, -0.3553326f),
    float2( 0.5136361f, -0.1853912f),
    float2( 0.9161283f, 0.1789677f),
    float2( 0.5509104f, -0.00900026f),
    float2( 0.8122881f, 0.3352548f),
    float2( 0.5092321f, 0.3277759f),
    float2( 0.244014f, 0.354344f),
    float2( 0.6238133f, 0.5796934f),
    float2( 0.4194615f, 0.1174604f),
    float2( 0.2807377f, 0.546949f),
    float2( 0.2513712f, 0.7305179f),
    float2( 0.08407734f, 0.5516469f),
    float2( 0.4664481f, 0.7662753f),
    float2( 0.03866818f, 0.8092254f),
    float2( 0.005164487f, 0.3895354f),
    float2( 0.316566f, -0.08691718f),
    float2( 0.2269246f, -0.3130311f),
    float2( 0.01883772f, 0.09158325f),
    float2( 0.3794343f, -0.4361103f),
    float2( 0.02191315f, -0.1513151f),
    float2( 0.213954f, 0.1004371f),
    float2( 0.3245378f, -0.6827997f),
    float2( 0.05144695f, -0.5721791f),
    float2( 0.6055056f, -0.5800556f),
    float2( -0.1821427f, 0.2089064f),
    float2( -0.309386f, 0.3871022f),
    float2( -0.1007363f, 0.6206852f),
    float2( -0.1050944f, 0.9676224f),
    float2( -0.3552752f, 0.8257514f),
    float2( 0.04661828f, -0.3499146f),
    float2( -0.2481359f, -0.3662213f),
    float2( -0.1791319f, -0.1877656f),
    float2( 0.4444182f, -0.8212244f),
    float2( 0.1124189f, -0.8560888f),
    float2( 0.2568449f, 0.9646764f),
    float2( -0.3785766f, 0.152263f),
    float2( -0.305928f, 0.6033902f),
    float2( -0.6568033f, 0.3632702f),
    float2( -0.4831935f, 0.5169519f),
    float2( -0.6668021f, 0.6696131f),
    float2( -0.5030748f, -0.4170329f),
    float2( -0.1258468f, -0.6668106f),
    float2( -0.3575842f, -0.1573154f),
    float2( -0.3176763f, -0.5908582f),
    float2( -0.1338526f, -0.9055352f),
    float2( -0.2873324f, -0.7783507f),
    float2( -0.5905975f, -0.03845305f),
    float2( -0.6305231f, 0.1417287f),
    float2( 0.8225359f, -0.5345978f),
    float2( -0.167868f, 0.01855697f),
    float2( -0.7833548f, 0.03911553f),
    float2( -0.7840307f, -0.1481868f),
    float2( -0.7910853f, 0.2329295f),
    float2( -0.7495611f, -0.4846875f),
    float2( -0.6495337f, -0.2767769f),
    float2( -0.6515827f, -0.6459702f),
    float2( -0.8359415f, 0.52143f),
    float2( -0.9563781f, 0.1298571f),
    float2( -0.4987544f, -0.7571594f),
    float2( -0.926212f, -0.3321568f),
    float2( -0.9771371f, -0.1199925)
};
#endif
